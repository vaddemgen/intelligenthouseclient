import com.github.spotbugs.SpotBugsTask

plugins {
  id 'java'
  id 'com.github.spotbugs' version "2.0.1"
  id "com.github.johnrengelman.shadow" version "5.2.0"
}

apply plugin: 'checkstyle'

group 'com.vaddemgen'
version '1.0.0-alpha.2'

sourceCompatibility = 11

ext {
  // https://mvnrepository.com/artifact/com.pi4j/pi4j-core
  pi4jVersion = '1+'

  // https://mvnrepository.com/artifact/com.google.code.gson/gson
  gsonVersion = '2+'

  // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
  // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
  logbackVersion = '1+'

  // https://mvnrepository.com/artifact/org.jetbrains/annotations
  jetbrainsVersion = '18+'

  // https://mvnrepository.com/artifact/org.projectlombok/lombok
  lombokVersion = '1+'

  // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
  // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
  junitJupiterVersion = '5+'

  // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
  junitPlatformLauncher = '1+'
}

checkstyle {
  toolVersion '8.26'
  configFile file("config/checkstyle/google_checks.xml")
}
checkstyleMain {
  source ='src/main/java'
}
checkstyleTest {
  source ='src/test/java'
}

tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There are Checkstyle warnings. Please fix it.")
      }
    }
  }
}

spotbugs {
  ignoreFailures = false
  toolVersion = "4.0.0-beta4"
  sourceSets=[sourceSets.main, sourceSets.test]
  excludeFilter = file("config/findbugs/excludeFilter.xml")
  reportsDir = file("$project.buildDir/reports/spotbugs")
  effort = "max"
}

tasks.withType(SpotBugsTask) {
  reports {
    xml.enabled false
    html.enabled true
  }
}

jar {
  manifest {
    attributes(
        'Main-Class': 'com.vaddemgen.intelligenthouseclient.Application'
    )
  }
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "com.pi4j:pi4j-core:$pi4jVersion"
  implementation "com.google.code.gson:gson:$gsonVersion"
  implementation "ch.qos.logback:logback-core:$logbackVersion"
  implementation "ch.qos.logback:logback-classic:$logbackVersion"
  implementation "org.jetbrains:annotations:$jetbrainsVersion"
  compileOnly "org.projectlombok:lombok:$lombokVersion"
  annotationProcessor "org.projectlombok:lombok:$lombokVersion"

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher:$junitPlatformLauncher'
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}
